dir()
dat <- file.path('ignore','nback.edat3')
fcon <- file(file.path(datpath,datfile))
mylines <- try(readLines(fcon))
datpath <- file.path('ignore')
datfile <- 'nback.edat3'
fcon <- file(file.path(datpath,datfile))
mylines <- try(readLines(fcon))
head(mylines)
mylines[1]
mylines[2]
datpath <- file.path('ignore')
datfile <- 'nback_spss.txt'
fcon <- file(file.path(datpath,datfile))
mylines <- try(readLines(fcon))
warnings()
mylines[1]
fcon <- file(file.path(datpath,datfile), encoding = "UTF-16LE")
mylines <- readLines(fcon, encoding = "UTF-16LE")
}
mylines[1]
if(grepl('[.]edat3',mylines[1])){
skiprows = 1
} else{
skiprows = 0
}
skiprows
if(trimws(mylines[1]) == '*** Header Start ***'){
dat <- edatTxt2mat(mylines)
procedure_trial_col <- 'Procedure'
procedure_trial_value <- 'RewardProc'
} else{
dat <- read.delim(file.path(datpath, datfile), skip = skiprows)
}
length(dat)
summary(dat)
mylines[1]
datpath <- file.path('ignore')
datfile <- 'nback_excel.txt'
fcon <- file(file.path(datpath,datfile))
mylines <- try(readLines(fcon))
warnings()
mylines[1]
mylines[2]
mylines[3]
fcon <- file(file.path(datpath,datfile), encoding = "UTF-16LE")
mylines <- readLines(fcon, encoding = "UTF-16LE")
mylines[1]
skiprows = 'auto'
if(skiprows == 'auto'){
if(grepl('[.]edat3',mylines[1])){
skiprows = 1
} else{
skiprows = 0
}
}
skiprows
dat <- read.delim(file.path(datpath, datfile), skip = skiprows)
summary(dat)
datpath
datfile
dat <- read.delim(file.path(datpath, datfile), skip = skiprows, encoding = "UTF-16LE")
dat[1,]
head(dat)
mylines[1]
dat <- read.delim(mylines, skip = skiprows)
mylines[2]
Encoding(file.path(datpath,datfile))
Encoding(file.path(datpath,'ignore/MID_Behavioral_20161218_LM_Trigger_v1-2001-1.txt'))
dat <- read.delim(file.path(datpath, datfile), skip = skiprows, fileEncoding = 'UTF-16LE')
head(dat)
lower('And')
tolower('And')
dat$Goodluck.OffsetTime[1]
unique(dat$Goodluck.OffsetTime[1])
unique(dat$Goodluck.OffsetTime)[1]
block_start_rows <- which(dat$trial == 1)
block_start_rows
block_start_rows <- which(dat$Trial == 1)
block_start_rows
condition <- dat[block_start_rows,'Procedure[Block]']
condition
colnames(dat)
condition <- dat[block_start_rows,'Procedure.Block']
condition
condition <- dat[block_start_rows,'Procedure.Block.']
condition
onset_onestim <- dat[block_start_rows,'onestim.OnsetTime']
onset_onestim
exp_start_time <- unique(dat$Goodluck.OffsetTime)[1]
119578-exp_start_time
onset_twostim <- dat[block_start_rows,'twostim.OnsetTime']
onset_twostim
onset <- ifelse(is.na(onset_onestim), onset_twostim, onset_onestim)
onset
onsets <- times - exp_start_time
time_onestim <- dat[block_start_rows,'onestim.OnsetTime']
time_twostim <- dat[block_start_rows,'twostim.OnsetTime']
times <- ifelse(is.na(time_onestim), time_twostim, time_onestim)
onsets <- times - exp_start_time
onsets
condition
conditions <- dat[block_start_rows,'Procedure.Block.']
dd <- data.frame(block = 1:length(block_start_rows), condition = conditions, onset = onsets)
dd
diff(dd$onset)
diff(dd$onset)-27
diff(dd$onset)-27000
dd <- data.frame(onset = onsets/1000, duration = 64, trial_type = conditions, block = 1:length(block_start_rows))
dd
pid = '003'
session = 'BL'
proc_method <- 'nback'
prefix=''
timingfile_format <- "sprintf('sub-%s_ses-%s_task-NBack_events.tsv', pid, session)"
eval(parse(timingfile_format))
a <- eval(parse(timingfile_format))
parse(timingfile_format)
eval(parse(text = timingfile_format))
devtools::document()
dir()
edatTimingFiles('nback_excel.txt','ignore','ignore', pid, session, prefix = prefix, timingfile_format = timingfile_format, proc_method = proc_method)
myfile <- 'nback_excel.txt'
mypath <- 'ignore'
mysave <- 'ignore'
fcon <- file(file.path(datpath,datfile))
mylines <- try(readLines(fcon))
mylines[1]
warnings()[1]
mylines[2]
mylines[3]
length(mylines)
mylines
mylines[1] == 'Ã¿Ã¾C'
fcon <- file(file.path(datpath,datfile), encoding = "UTF-16LE")
mylines <- readLines(fcon, encoding = "UTF-16LE")
mylines[1]
devtools::document()
pid = '003'
session = 'BL'
proc_method <- 'nback'
prefix=''
timingfile_format <- "sprintf('sub-%s_ses-%s_task-NBack_events.tsv', pid, session)"
mysave <- 'ignore'
skiprows = 'auto'
datpath <- file.path('ignore')
datfile <- 'nback_excel.txt'
edatTimingFiles(datfile,datpath, mysave, pid, session, prefix = prefix, timingfile_format = timingfile_format, proc_method = proc_method)
warnings()
loaded_dat <- loadDat(datfile, datpath, sheetname = sheetname, skiprows = skiprows)
loaded_dat
devtools::document()
export_format <- 'fmriprep'
edatTimingFiles(datfile,datpath, mysave, pid, session, prefix = prefix, timingfile_format = timingfile_format, proc_method = proc_method, export_format = export_format)
devtools::document()
edatTimingFiles(datfile,datpath, mysave, pid, session, prefix = prefix, timingfile_format = timingfile_format, proc_method = proc_method, export_format = export_format)
edatTimingFiles(datfile,datpath, mysave, pid, session, prefix = prefix, timingfile_format = timingfile_format, proc_method = proc_method, export_format = export_format)
edatTimingFiles(datfile,datpath, mysave, pid, session, prefix = prefix, timingfile_format = timingfile_format, proc_method = proc_method, export_format = export_format)
edatTimingFiles(datfile,datpath, mysave, pid, session, prefix = prefix, timingfile_format = timingfile_format, proc_method = proc_method, export_format = export_format)
devtools::document(
)
edatTimingFiles(datfile,datpath, mysave, pid, session, prefix = prefix, timingfile_format = timingfile_format, proc_method = proc_method, export_format = export_format)
devtools::document()
?edatTimingFiles
devtools::document()
?edatTimingFiles
devtools::document()
